/*

  The MIT License (MIT)

  Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// NBN: toggle use of {beta_a} vs {beta_ab}
#define NBN_USE_BETA_AB_FOR_3D  1


// complex frequency shift version
// TW this one
@kernel void maxwellCubatureCfsPmlTermsTet3D(const dlong Npmlelements,
                                   @restrict const  dlong *  pmlElementIds,
                                   @restrict const  dlong *  pmlIds,
                                   @restrict const  dfloat * cubPmlSigma,
                                   @restrict const  dfloat * cubPmlBeta,
                                   @restrict const  dfloat * cubInterp, // interpolate to cubature nodes	
                                   @restrict const  dfloat * cubProject, // project from cubature to interpolation nodes
                                   @restrict const  dfloat * q,
                                   @restrict const  dfloat * pmlq,
                                   @restrict        dfloat * rhsq,
                                   @restrict        dfloat * rhspmlq){

  // for all elements
  for(dlong e=0;e<Npmlelements;++e;@outer(0)){

    // reduces shared storage by processing one face at a time
    @shared dfloat s_Hx[p_cubMaxNp];
    @shared dfloat s_Hy[p_cubMaxNp];
    @shared dfloat s_Hz[p_cubMaxNp];
    @shared dfloat s_Ex[p_cubMaxNp];
    @shared dfloat s_Ey[p_cubMaxNp];
    @shared dfloat s_Ez[p_cubMaxNp];
    
    @shared dfloat s_Hxy[p_cubMaxNp];   //  0  xy
    @shared dfloat s_Hxz[p_cubMaxNp];   //  1  xz
    @shared dfloat s_Hyx[p_cubMaxNp];   //  2  yx
    @shared dfloat s_Hyz[p_cubMaxNp];   //  3  yz
    @shared dfloat s_Hzx[p_cubMaxNp];   //  4  zx
    @shared dfloat s_Hzy[p_cubMaxNp];   //  5  zy

    @shared dfloat s_Exy[p_cubMaxNp];   //  6  xy
    @shared dfloat s_Exz[p_cubMaxNp];   //  7  xz
    @shared dfloat s_Eyx[p_cubMaxNp];   //  8  yx
    @shared dfloat s_Eyz[p_cubMaxNp];   //  9  yz
    @shared dfloat s_Ezx[p_cubMaxNp];   // 10  zx
    @shared dfloat s_Ezy[p_cubMaxNp];   // 11  zy

    @exclusive dlong element, pmlElement;

    for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
      element = pmlElementIds[e];
      pmlElement = pmlIds[e];
      if(n<p_Np){
        const dlong base = element * p_Np * p_Nfields + n;
        const dlong pmlbase = pmlElement * p_Np * p_Npmlfields + n;

        s_Hx[n] = q[base+0*p_Np];
        s_Hy[n] = q[base+1*p_Np];
        s_Hz[n] = q[base+2*p_Np];
        s_Ex[n] = q[base+3*p_Np];
        s_Ey[n] = q[base+4*p_Np];
        s_Ez[n] = q[base+5*p_Np];

        s_Hxy[n] = pmlq[pmlbase+0*p_Np];
        s_Hxz[n] = pmlq[pmlbase+1*p_Np];
        s_Hyx[n] = pmlq[pmlbase+2*p_Np];
        s_Hyz[n] = pmlq[pmlbase+3*p_Np];
        s_Hzx[n] = pmlq[pmlbase+4*p_Np];
        s_Hzy[n] = pmlq[pmlbase+5*p_Np];

        s_Exy[n] = pmlq[pmlbase+6*p_Np];
        s_Exz[n] = pmlq[pmlbase+7*p_Np];
        s_Eyx[n] = pmlq[pmlbase+8*p_Np];
        s_Eyz[n] = pmlq[pmlbase+9*p_Np];
        s_Ezx[n] = pmlq[pmlbase+10*p_Np];
        s_Ezy[n] = pmlq[pmlbase+11*p_Np];
      }
    }

    @exclusive dfloat cubHx, cubHy, cubHz;
    @exclusive dfloat cubEx, cubEy, cubEz;
    @exclusive dfloat cubHxy, cubHxz, cubHyx, cubHyz, cubHzx, cubHzy;
    @exclusive dfloat cubExy, cubExz, cubEyx, cubEyz, cubEzx, cubEzy;

    // interpolate to cubature nodes
    for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
      
      // reset accumulators
      cubHx = cubHy = cubHz = 0.f;
      cubEx = cubEy = cubEz = 0.f;
      cubHxy = cubHxz = cubHyx = cubHyz = cubHzx = cubHzy = 0.f;
      cubExy = cubExz = cubEyx = cubEyz = cubEzx = cubEzy = 0.f;

      #pragma unroll p_Np
      for(int m=0;m<p_Np;++m){

        const dfloat cInm = cubInterp[n+m*p_cubNp];

        cubHx  += cInm*s_Hx[m];
        cubHy  += cInm*s_Hy[m];
        cubHz  += cInm*s_Hz[m];

        cubEx  += cInm*s_Ex[m];
        cubEy  += cInm*s_Ey[m];
        cubEz  += cInm*s_Ez[m];

        cubHxy += cInm*s_Hxy[m];
        cubHxz += cInm*s_Hxz[m];
        cubHyx += cInm*s_Hyx[m];
        cubHyz += cInm*s_Hyz[m];
        cubHzx += cInm*s_Hzx[m];
        cubHzy += cInm*s_Hzy[m];

        cubExy += cInm*s_Exy[m];
        cubExz += cInm*s_Exz[m];
        cubEyx += cInm*s_Eyx[m];
        cubEyz += cInm*s_Eyz[m];
        cubEzx += cInm*s_Ezx[m];
        cubEzy += cInm*s_Ezy[m];
      }
    }

    // apply scaling factors {sigma_a}, {beta_ab} at cubature nodes
    for(int n=0;n<p_cubMaxNp;++n;@inner(0)){

      dlong sbase = p_dim*pmlElement*p_cubNp + n;
      dfloat cubSigmaX = cubPmlSigma[sbase+0*p_cubNp];
      dfloat cubSigmaY = cubPmlSigma[sbase+1*p_cubNp];
      dfloat cubSigmaZ = cubPmlSigma[sbase+2*p_cubNp];

#if (NBN_USE_BETA_AB_FOR_3D)

      // NBN: [from pdf p.8]
      // beta_ab = alpha_a + sigma_a/(kappa_a*kappa_b)

      dlong bbase = 6 * pmlElement * p_cubNp + n;   // beta_ab
      dfloat cubBetaXY = cubPmlBeta[bbase+0*p_cubNp]; //  xy
      dfloat cubBetaXZ = cubPmlBeta[bbase+1*p_cubNp]; //  xz
      dfloat cubBetaYX = cubPmlBeta[bbase+2*p_cubNp]; //  yx
      dfloat cubBetaYZ = cubPmlBeta[bbase+3*p_cubNp]; //  yz
      dfloat cubBetaZX = cubPmlBeta[bbase+4*p_cubNp]; //  zx
      dfloat cubBetaZY = cubPmlBeta[bbase+5*p_cubNp]; //  zy
#else
      dlong bbase = 3 * pmlElement * p_cubNp + n;   // beta_a
      dfloat cubBetaXY = cubPmlBeta[bbase+0*p_cubNp]; //  xx
      dfloat cubBetaXZ = cubPmlBeta[bbase+0*p_cubNp]; //  xx
      dfloat cubBetaYX = cubPmlBeta[bbase+1*p_cubNp]; //  yy
      dfloat cubBetaYZ = cubPmlBeta[bbase+1*p_cubNp]; //  yy
      dfloat cubBetaZX = cubPmlBeta[bbase+2*p_cubNp]; //  zz
      dfloat cubBetaZY = cubPmlBeta[bbase+2*p_cubNp]; //  zz
#endif

      // check signs
      s_Hx[n]  =  cubSigmaY*cubEzy - cubSigmaZ*cubEyz;
      s_Hy[n]  =  cubSigmaZ*cubExz - cubSigmaX*cubEzx;
      s_Hz[n]  =  cubSigmaX*cubEyx - cubSigmaY*cubExy;

      s_Ex[n]  = -cubSigmaY*cubHzy + cubSigmaZ*cubHyz;
      s_Ey[n]  = -cubSigmaZ*cubHxz + cubSigmaX*cubHzx;
      s_Ez[n]  = -cubSigmaX*cubHyx + cubSigmaY*cubHxy;

      s_Hxy[n] = -cubBetaXY * cubHxy;
      s_Hxz[n] = -cubBetaXZ * cubHxz;
      s_Hyx[n] = -cubBetaYX * cubHyx;
      s_Hyz[n] = -cubBetaYZ * cubHyz;
      s_Hzx[n] = -cubBetaZX * cubHzx;
      s_Hzy[n] = -cubBetaZY * cubHzy;

      s_Exy[n] = -cubBetaXY * cubExy;
      s_Exz[n] = -cubBetaXZ * cubExz;
      s_Eyx[n] = -cubBetaYX * cubEyx;
      s_Eyz[n] = -cubBetaYZ * cubEyz;
      s_Ezx[n] = -cubBetaZX * cubEzx;
      s_Ezy[n] = -cubBetaZY * cubEzy;
    }

    // project from cubature to interpolation nodes
    for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
      if(n<p_Np){

        dfloat rhsHx = 0.f, rhsHy = 0.f, rhsHz = 0.f;
        dfloat rhsEx = 0.f, rhsEy = 0.f, rhsEz = 0.f;

        dfloat rhsHxy = 0.f, rhsHxz = 0.f;
        dfloat rhsHyx = 0.f, rhsHyz = 0.f;
        dfloat rhsHzx = 0.f, rhsHzy = 0.f;

        dfloat rhsExy = 0.f, rhsExz = 0.f;
        dfloat rhsEyx = 0.f, rhsEyz = 0.f;
        dfloat rhsEzx = 0.f, rhsEzy = 0.f;

        for(int m=0;m<p_cubNp;++m){
          
          const dfloat cPnm = cubProject[n+m*p_Np];
          
          rhsHx  += cPnm*s_Hx[m];
          rhsHy  += cPnm*s_Hy[m];
          rhsHz  += cPnm*s_Hz[m];

          rhsEx  += cPnm*s_Ex[m];
          rhsEy  += cPnm*s_Ey[m];
          rhsEz  += cPnm*s_Ez[m];

          rhsHxy += cPnm * s_Hxy[m];
          rhsHxz += cPnm * s_Hxz[m];
          rhsHyx += cPnm * s_Hyx[m];
          rhsHyz += cPnm * s_Hyz[m];
          rhsHzx += cPnm * s_Hzx[m];
          rhsHzy += cPnm * s_Hzy[m];

          rhsExy += cPnm * s_Exy[m];
          rhsExz += cPnm * s_Exz[m];
          rhsEyx += cPnm * s_Eyx[m];
          rhsEyz += cPnm * s_Eyz[m];
          rhsEzx += cPnm * s_Ezx[m];
          rhsEzy += cPnm * s_Ezy[m];
        }

        const dlong    base =    element*p_Np*p_Nfields + n;
        const dlong pmlbase = pmlElement*p_Np*p_Npmlfields + n;

        rhsq[base+0*p_Np] += rhsHx;
        rhsq[base+1*p_Np] += rhsHy;
        rhsq[base+2*p_Np] += rhsHz;

        rhsq[base+3*p_Np] += rhsEx;
        rhsq[base+4*p_Np] += rhsEy;
        rhsq[base+5*p_Np] += rhsEz;

        rhspmlq[pmlbase+0*p_Np] += rhsHxy;
        rhspmlq[pmlbase+1*p_Np] += rhsHxz;
        rhspmlq[pmlbase+2*p_Np] += rhsHyx;
        rhspmlq[pmlbase+3*p_Np] += rhsHyz;
        rhspmlq[pmlbase+4*p_Np] += rhsHzx;
        rhspmlq[pmlbase+5*p_Np] += rhsHzy;

        rhspmlq[pmlbase+6*p_Np] += rhsExy;
        rhspmlq[pmlbase+7*p_Np] += rhsExz;
        rhspmlq[pmlbase+8*p_Np] += rhsEyx;
        rhspmlq[pmlbase+9*p_Np] += rhsEyz;
        rhspmlq[pmlbase+10*p_Np] += rhsEzx;
        rhspmlq[pmlbase+11*p_Np] += rhsEzy;
      }
    }
  }
}


@kernel void maxwellCfsPmlTermsTet3D(const dlong Npmlelements,
                           @restrict const  dlong *  pmlElementIds,
                           @restrict const  dlong *  pmlIds,
                           @restrict const  dfloat * pmlSigma,
                           @restrict const  dfloat * pmlBeta,
                           @restrict const  dfloat * q,
                           @restrict const  dfloat * pmlq,
                           @restrict        dfloat * rhsq,
                           @restrict        dfloat * rhspmlq){

  // for all elements
  for(dlong e=0;e<Npmlelements;++e;@outer(0)){

#define USE_ORIGINAL_SCALING 1

    for(int n=0;n<p_Np;++n;@inner(0)){

      dlong element = pmlElementIds[e];
      dlong pmlElement = pmlIds[e];

      const dlong base    =    element*p_Np*p_Nfields    + n;
      const dlong pmlbase = pmlElement*p_Np*p_Npmlfields + n;

      dfloat Hx = q[base+0*p_Np];
      dfloat Hy = q[base+1*p_Np];
      dfloat Hz = q[base+2*p_Np];
      dfloat Ex = q[base+3*p_Np];
      dfloat Ey = q[base+4*p_Np];
      dfloat Ez = q[base+5*p_Np];

      dfloat Hxy = pmlq[pmlbase+0*p_Np];
      dfloat Hxz = pmlq[pmlbase+1*p_Np];
      dfloat Hyx = pmlq[pmlbase+2*p_Np];
      dfloat Hyz = pmlq[pmlbase+3*p_Np];
      dfloat Hzx = pmlq[pmlbase+4*p_Np];
      dfloat Hzy = pmlq[pmlbase+5*p_Np];

      dfloat Exy = pmlq[pmlbase+6*p_Np];
      dfloat Exz = pmlq[pmlbase+7*p_Np];
      dfloat Eyx = pmlq[pmlbase+8*p_Np];
      dfloat Eyz = pmlq[pmlbase+9*p_Np];
      dfloat Ezx = pmlq[pmlbase+10*p_Np];
      dfloat Ezy = pmlq[pmlbase+11*p_Np];

#if USE_ORIGINAL_SCALING==1
      dfloat rhsHxy = rhspmlq[pmlbase+0*p_Np];
      dfloat rhsHxz = rhspmlq[pmlbase+1*p_Np];
      dfloat rhsHyx = rhspmlq[pmlbase+2*p_Np];
      dfloat rhsHyz = rhspmlq[pmlbase+3*p_Np];
      dfloat rhsHzx = rhspmlq[pmlbase+4*p_Np];
      dfloat rhsHzy = rhspmlq[pmlbase+5*p_Np];

      dfloat rhsExy = rhspmlq[pmlbase+6*p_Np];
      dfloat rhsExz = rhspmlq[pmlbase+7*p_Np];
      dfloat rhsEyx = rhspmlq[pmlbase+8*p_Np];
      dfloat rhsEyz = rhspmlq[pmlbase+9*p_Np];
      dfloat rhsEzx = rhspmlq[pmlbase+10*p_Np];
      dfloat rhsEzy = rhspmlq[pmlbase+11*p_Np];
#endif

      dlong sbase = p_dim*pmlElement*p_Np + n;
      dfloat sigmaX = pmlSigma[sbase + 0*p_Np];
      dfloat sigmaY = pmlSigma[sbase + 1*p_Np];
      dfloat sigmaZ = pmlSigma[sbase + 2*p_Np];
      dfloat betaX  =  pmlBeta[sbase + 0*p_Np];
      dfloat betaY  =  pmlBeta[sbase + 1*p_Np];
      dfloat betaZ  =  pmlBeta[sbase + 2*p_Np];

#if USE_ORIGINAL_SCALING==1
      // check signs
      rhsq[base+0*p_Np] += -Eyz+Ezy;
      rhsq[base+1*p_Np] += -Exz+Ezx;
      rhsq[base+2*p_Np] += -Eyx+Exy;
      rhsq[base+3*p_Np] +=  Hyz-Hzy;
      rhsq[base+4*p_Np] +=  Hxz-Hzx;
      rhsq[base+5*p_Np] +=  Hyx-Hxy;

      rhspmlq[pmlbase+0*p_Np] = sigmaY*rhsHxy - betaY*Hxy;
      rhspmlq[pmlbase+1*p_Np] = sigmaZ*rhsHxz - betaZ*Hxz;
      rhspmlq[pmlbase+2*p_Np] = sigmaX*rhsHyx - betaX*Hyx;
      rhspmlq[pmlbase+3*p_Np] = sigmaZ*rhsHyz - betaZ*Hyz;
      rhspmlq[pmlbase+4*p_Np] = sigmaX*rhsHzx - betaX*Hzx;
      rhspmlq[pmlbase+5*p_Np] = sigmaY*rhsHzy - betaY*Hzy;

      rhspmlq[pmlbase+6*p_Np] = sigmaY*rhsExy - betaY*Exy;
      rhspmlq[pmlbase+7*p_Np] = sigmaZ*rhsExz - betaZ*Exz;
      rhspmlq[pmlbase+8*p_Np] = sigmaX*rhsEyx - betaX*Eyx;
      rhspmlq[pmlbase+9*p_Np] = sigmaZ*rhsEyz - betaZ*Eyz;
      rhspmlq[pmlbase+10*p_Np] = sigmaX*rhsEzx - betaX*Ezx;
      rhspmlq[pmlbase+11*p_Np] = sigmaY*rhsEzy - betaY*Ezy;
#else
      // check signs
      rhsq[base+0*p_Np] += -sigmaZ*Eyz + sigmaY*Ezy;
      rhsq[base+1*p_Np] += -sigmaX*Ezx + sigmaZ*Exz;
      rhsq[base+2*p_Np] += -sigmaX*Eyx + sigmaY*Exy;
      rhsq[base+3*p_Np] +=  sigmaZ*Hyz - sigmaY*Hzy;
      rhsq[base+4*p_Np] +=  sigmaX*Hzx - sigmaZ*Hxz;
      rhsq[base+5*p_Np] +=  sigmaX*Hyx - sigmaY*Hxy;

      rhspmlq[pmlbase+0*p_Np] -= betaY*Hxy;
      rhspmlq[pmlbase+1*p_Np] -= betaZ*Hxz;
      rhspmlq[pmlbase+2*p_Np] -= betaX*Hyx;
      rhspmlq[pmlbase+3*p_Np] -= betaZ*Hyz;
      rhspmlq[pmlbase+4*p_Np] -= betaX*Hzx;
      rhspmlq[pmlbase+5*p_Np] -= betaY*Hzy;

      rhspmlq[pmlbase+6*p_Np] -= betaY*Exy;
      rhspmlq[pmlbase+7*p_Np] -= betaZ*Exz;
      rhspmlq[pmlbase+8*p_Np] -= betaX*Eyx;
      rhspmlq[pmlbase+9*p_Np] -= betaZ*Eyz;
      rhspmlq[pmlbase+10*p_Np] -= betaX*Ezx;
      rhspmlq[pmlbase+11*p_Np] -= betaY*Ezy;

#endif
    }
  }
}
